// 8 puzz me 
#include <bits/stdc++.h>
using namespace std;


int mov[] = {3, -3, 1, -1};

map<string, bool> vis;
vector<string> path;

bool isValid(int pos)   {
    return pos >= 0 && pos <= 8;
}

int heuristic(string current, string goal)  {
    int H = 0;
    for(int i = 0; i < 9; i++)
        H += current[i] != goal[i];
    
    return H;
}

int astar(string start, string goal)    {
    int step = 0;
    priority_queue <pair<int, pair<int, string>>, 
        vector<pair<int, pair<int, string>>>, 
        greater<pair<int, pair<int, string>>>> pq;
    // int ans = 0;
    pq.push({heuristic(start, goal), {1, start}});
    map<string, string> path;

    while(!pq.empty())  {
        // ans++;
        string current = pq.top().second.second;
        int cost = pq.top().first;
        int ans = pq.top().second.first;
        pq.pop();

        if(current == goal) {
            cout << "Found" << endl;
            vector<string> moves; 
            while(current != start) {
                moves.push_back(current);
                current = path[current];
            }   moves.push_back(start);

            reverse(moves.begin(), moves.end());
            for(auto i: moves)  {
                cout << endl;
                for(int j = 0; j < 9; j++)  {
                    cout << i[j] << " ";
                    if(j%3 == 2)    cout << endl;
                }   cout << endl;
            }
            // cout << start << endl;
            return (moves.size() - 1);
        }

        int pos;
        for(pos = 0; pos < 9; pos++)
            if(current[pos] == '0')
                break;

        vector<int> posMove;
        for(int i = 0; i < 4; i++)  {
            if(!isValid(pos+mov[i]))   continue;

            posMove.push_back(pos+mov[i]);
        }

        for(auto i: posMove)    {
            string temp = current;
            swap(current[i], current[pos]);

            if(vis[current] != true)    {
                int currentCost = ans + 1 + heuristic(current, goal);
                vis[current] = true;
                pq.push({currentCost, {ans+1,  current}});
                path[current] = temp;
            }

            current = temp;
        }   
    }
    return - 1;
}

int main()  {
    string start, fin;
    cin >> start >> fin;
    // start = "123456780";
    // fin = "123504765";

    cout << astar(start, fin) << endl;
}

// 8 puzz 2
#include <bits/stdc++.h>
using namespace std;

#define endl '\n'
#define ll long long
#define int ll int

int x[]={0,0,1,-1};
int y[]={1,-1,0,0};

vector<vector<int>> goal = {{1, 2, 3},{4, 5, 6},{7, 8, 0}};
map<vector<vector<int>>,vector<vector<int>>> par;

bool is_safe(int a,int b)   {
    if(a>=0 and b>=0 and a<=2 and b<=2) return true;
    return false;
}

bool is_goal(vector<vector<int>> init){
    return init==goal;
}

int heuristic(vector<vector<int>> s){
    int cnt=0;
    for(int i=0;i<3;i++)
        for(int j=0;j<3;j++)
            if(s[i][j]!=goal[i][j]) cnt++;

    return cnt;
}

void print_state(vector<vector<int>> s) {
    for(int i=0;i<3;i++)    {
        for(int j=0;j<3;j++)
            cout << s[i][j] << ' ';
        cout << endl;
    }
    cout << endl;
}

pair<int,int> find_empty(vector<vector<int>> s) {
    for(int i=0;i<3;i++)    {
        for(int j=0;j<3;j++)
           if(s[i][j]==0) return {i,j};
    }
    return {-1, -1};
}

vector<vector<int>> Swap(vector<vector<int>> cur,int a,int b,int c,int d)   {
    swap(cur[a][b],cur[c][d]);
    return cur;
}

void solve(int cs)  {
    vector<vector<int>> init = {{1, 2, 3},{5, 6, 0},{7, 8, 4}};

    map<vector<vector<int>> ,bool> vis;
    priority_queue<pair<int, vector<vector<int>>>, vector<pair<int, vector<vector<int>>>>, greater<pair<int, vector<vector<int>>>>> pq;
    
    pq.push({heuristic(init),init});
    int deep=0;

    while(!pq.empty())  {
        vector<vector<int>> cur = pq.top().second;
        int cost=pq.top().first;
        pq.pop();
        // print_state(cur);
        vis[cur]=true;

        if(cur==goal)
        {
            print_state(cur);
            break;
        }

        deep++;

        pair<int,int> e = find_empty(cur);

        for(int i=0;i<4;i++)    {
            int p=e.first+x[i];
            int q=e.second+y[i];

            if(is_safe(p,q))    {
                vector<vector<int>> new_state = Swap(cur,e.first,e.second,p,q);
            
                if(!vis[new_state]){
                    par[new_state]=cur;
                    pq.push({deep+heuristic(new_state), new_state});
                }
            }
        }
    }

    cout << "path: " << endl;
    
    vector<vector<vector<int>>> ans;
    vector<vector<int>> x=goal;
    
    ans.push_back(x);
    while(par[x]!=init) {   
        x=par[x];
        ans.push_back(x);
    }   ans.push_back(init);

    reverse(ans.begin(),ans.end());
    
    cout << ans.size() << endl << endl;
    
    for(int i=0;i<ans.size();i++)
        print_state(ans[i]);
}

int32_t main()  {
    ios::sync_with_stdio(0);
    cin.tie(0);

    int t=1;
    int cs=1;
    
    while (t--)
        solve(cs++);

   return 0;
}

// 8 queen 

import random

def random_board(n):
    # generates a rndm borad with qns plcd rndmly in each clm
    board = [random.randint(0, n-1) for i in range(n)]
    return board

def hueristic_cost(board):
    # clculte nmbr of attcking qn pairs on brd
    n = len(board)
    attacking_pairs = 0
    
    for i in range(n):  
        for j in range(i+1, n):
            if board[i] == board[j] or abs(board[i] == board[j]) == j - i:
                attacking_pairs+=1
    
    return attacking_pairs

def hill_climb(m, max_iterations):
    current_board = random_board(n)
    current_cost = hueristic_cost(current_board)
    steps = 0 
    
    for _ in range(max_iterations):
        neighbor_board = current_board[:]
        
        row_to_move = random.randint(0, n-1)
        new_column = random.randint(0, n-1)
        
        neighbor_board[row_to_move] = new_column
        neighbor_cost = hueristic_cost(neighbor_board)
        steps += 1
        
        print_board(current_board)
        print("")
        
        if neighbor_cost == 0:
            return neighbor_board, steps # solution found
        if neighbor_cost < current_cost:
            current_board = neighbor_board
            current_cost = neighbor_cost
    
    return None, steps

def print_board(board):
    n = len(board)
    for row in range(n):
        line = ""
        for col in range(n):
            if board[col] == row:
                line += "Q "
            else:
                line += ". "
        print(line)

if __name__ == "__main__":
    n = 8
    max_iterations = 100
    
    solution, steps = hill_climb(n, max_iterations)
    
    if solution:
        print_board(solution)
    else:
        print("No solution found within the max iterations")

// sudoku me 

#include <bits/stdc++.h>
using namespace std;

int index = 0;
map<int, vector<vector<int>>> solutions;

void showGrid(int grid[9][9]) {
    for (int i = 0; i < 9; i++) {
        if(i%3==0 && i != 0)    cout << "- - - - - - - - - - - \n";
        for (int j = 0; j < 9; j++) {
            if(j%3==0 && j != 0)  cout << "| ";
            cout << grid[i][j] << ' ';
        }
        cout << endl;
    }
}

pair<int, int> findEmptySpace(int grid[9][9]) {
    pair<int, int> space = {-1, -1}; 

    for (int i = 0; i < 9; i++)
        for (int j = 0; j < 9; j++)
            if (grid[i][j] == 0) {
                space.first = i;
                space.second = j;
                return space;
            }

    return space;
}

bool isValid(int grid[9][9], int n, pair<int, int> pos) {
    int row = pos.first;
    int col = pos.second;

    for (int i = 0; i < 9; i++)
        if (grid[row][i] == n || grid[i][col] == n)
            return false;

    int x = row - (row % 3);
    int y = col - (col % 3);

    for (int i = x; i < x + 3; i++)
        for (int j = y; j < y + 3; j++)
            if (grid[i][j] == n)
                return false;

    return true;
}

bool sudokuSolver(int grid[9][9]) {
    pair<int, int> location = findEmptySpace(grid);

    if (location.first == -1) { 
        cout << "Solved:\n";
        showGrid(grid);
        return true;
    }

    int row = location.first;
    int col = location.second;

    for (int i = 1; i <= 9; i++) {
        if (isValid(grid, i, location)) {
            grid[row][col] = i;

            if (sudokuSolver(grid)) {

                vector<vector<int>> temp(9);
                for (size_t a = 0; a < 9; a++)
                    for (size_t b = 0; b < 9; b++)
                        temp[a].push_back(grid[a][b]);

                solutions[index++] = temp;
                return true; 
            }

            grid[row][col] = 0;
        }
    }

    return false;
}

int main() {
    freopen("input.txt", "r+", stdin);
    int grid[9][9];

    for (int i = 0; i < 9; i++)
        for (int j = 0; j < 9; j++)
            cin >> grid[i][j];

    showGrid(grid);
    sudokuSolver(grid);

    return 0;
}

// sudoku 2

#include <bits/stdc++.h>
using namespace std;

vector<pair<int, int>> faka;
vector<vector<int>> grid;

bool is_valid(int x, int y, int val) {
    for (int i = 0; i < 9; i++)
        if(grid[i][y] == val or grid[x][i] == val) return false;

    int i1 = (x/3) * 3, j1 = (y/3) * 3;

    for (int i = i1; i < i1 + 3; i++) {
        for (int j = j1; j < j1 + 3; j++)
            if(grid[i][j] == val) return false;
    }

    return true;
}

bool sudoku(int id) {
    if(id >= faka.size()) return true;

    auto[i1, j1] = faka[id];

    for (int i = 1; i <= 9; ++i) {
        if(is_valid( i1, j1, i)) {
            grid[i1][j1] = i;
            if(sudoku(id+1)) return true;
        }
        grid[i1][j1] = 0;
    }
    return false;
}

int32_t main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    grid = {{ 0, 0, 8, 0, 5, 0, 0, 0, 0},
            { 1, 0, 0, 9, 2, 0, 0, 0, 6},
            { 0, 6, 0, 0, 0, 0, 0, 7, 0},
            { 0, 0, 4, 0, 0, 0, 8, 0, 0},
            { 0, 0, 0, 0, 0, 3, 0, 0, 0},
            { 2, 0, 0, 1, 6, 0, 0, 0, 7},
            { 0, 0, 2, 3, 9, 0, 0, 4, 0},
            { 0, 0, 0, 0, 0, 5, 0, 0, 9},
            { 3, 0, 0, 0, 0, 7, 0, 0, 0}};


    for (int i = 0; i < 9; i++)
        for (int j = 0; j < 9; j++)
            if(grid[i][j] == 0) faka.push_back({i, j});


    sort(faka.begin(), faka.end());

    // for (auto[x, y] : faka) cout << x <<' ' << y << endl;

    if(sudoku(0)) {
        cout << "Sudoku solved" << endl;
        for (auto v : grid) {
            for (auto i : v) cout << i << ' ';
                cout << endl;
        }
    } else {
        cout << "The sudoku is not solvable" << endl;
    }

    return 0;
}

/**
 /**
4 2 8 7 5 6 3 9 1 
1 3 7 9 2 4 5 8 6 
9 6 5 8 3 1 2 7 4 
6 9 4 5 7 2 8 1 3 
5 7 1 4 8 3 9 6 2 
2 8 3 1 6 9 4 5 7 
7 1 2 3 9 8 6 4 5 
8 4 6 2 1 5 7 3 9 
3 5 9 6 4 7 1 2 8
*/


// ask and tell

// BISMILLAH

#include <bits/stdc++.h>

using namespace std;

signed main() {
    ifstream MyReadFile("set.txt");

    map<int,string> data;
    
    string dt;
    int id=0;
    while (getline (MyReadFile, dt)) {
        data[id++] = dt;
    }

    while (true) {
        string Q; getline(cin,Q);

        // What's your name?
        // How old are you?
        // Where do you live?

        stringstream ss(Q);

        string s; id = -1;
        while (ss>>s) {
            // cout << s << endl;
            if (s=="name?") { id = 0; break; }
            else if (s=="old") { id = 1; break; }
            else if (s=="live?") { id = 2; break; }
        }

        if (id==-1) cout << "undefined" << endl;
        else cout << data[id] << endl;
    }


    return 0;
}

// crypto

#include <bits/stdc++.h>
using namespace std;

string s1, s2, s3;

int main()
{
    cin >> s1 >> s2 >> s3;
    set<char> st;
    vector<int> pos(30, 0);
    for (char ch : s1)
        st.insert(ch);
    for (char ch : s2)
        st.insert(ch);
    for (char ch : s3)
        st.insert(ch);
    int i1 = 0;
    for (char ch : st)
        pos[ch - 'a'] = i1++;
    vector<int> a = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
    for (char ch : st)
        cout << ch;
    cout << endl;

    do
    {
        int c = 0;
        bool f = true;
        int n1 = 0, n2 = 0, n3 = 0;
        for (char ch : s1)
            n1 = n1 * 10 + a[pos[ch - 'a']];
        for (char ch : s2)
            n2 = n2 * 10 + a[pos[ch - 'a']];
        for (char ch : s3)
            n3 = n3 * 10 + a[pos[ch - 'a']];

        if (n1 + n2 == n3)
        {
            for (char ch : st)
            {
                cout << ch << " " << a[pos[ch - 'a']] << endl;
            }
            for (char ch : s1)
                cout << a[pos[ch - 'a']];
            cout << endl;
            for (char ch : s2)
                cout << a[pos[ch - 'a']];
            cout << endl;
            for (char ch : s3)
                cout << a[pos[ch - 'a']];
            cout << endl;
            break;
        }

    } while (next_permutation(a.begin(), a.end()));

    return 0;
}

// QnA smi 

def findans(question: str):
	question_words = [word.lower() for word in question.split()]
	question_words = set(question_words)

	ret = []
	with open("q.txt", "r") as file:
		lines = file.read().split('\n')

		for line in lines:
			line_words = [word.lower() for word in line.split() ]
			line_words = set(line_words)

			cnt = 0
			for word in line_words:
				if word in question_words:
					cnt += 1

			ret.append([cnt, line])

	ret.sort(reverse=True)
	if len(ret):
		return ret[0][1]

	return "Sorry, I don't have an answer for that."

while True:
    question = input("Ask me a question. Type 'exit' to stop: ")
    if question.lower() == 'exit':
        break

    print(findans(question))
